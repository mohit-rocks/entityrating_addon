<?php
/**
 * @file
 * Module file for entity external rating modules.
 * This will add configuration option on the entity configuration form. 
 * This will list all the checkboxes for the content type and you have to check it, if you want to display twitter, facebook links
 */

/**
 * Implementation of hook_theme();
 */
function entityrating_addon_theme() {
	return array(
			'entityrating_addon_html_widgets' => array(
					'variables' => array('widgets' => array(), 'node' => NULL),
					'template' => 'themes/entityrating_addon_html_widgets'
			),
	);
}
/**
 * Implements hook_permission().
 */
function entityrating_addon_permission() {
	return array(
		'administer entityrating addone' => array(
				'title' => t('Administer Entity rating Addone'),
		),
	);
}

/**
 * Implements hook_menu().
 */
function entityrating_addon_menu() {
	$items = array();
	$items['admin/structure/entityaddon_setting'] = array(
		'title' => 'Entity Addone Settings',
		'description' => 'External Entity rating addone that will display list of all the content types.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('entityrating_addone_admin_settings'),
		'access arguments' => array('administer entityrating addone'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'entityrating_addon.admin.inc',
	);
	$items['admin/structure/entityaddon_setting/analysis'] = array(
			'title' => 'Charts',
			'description' => 'This will show the rating weightage graph of the rating system.',
			'page callback' => 'drupal_get_form',
      'page arguments' => array('filter_contenttype_and_nodes'),
      'access callback' => TRUE,
			'access arguments' => array('administer entityrating addone'),
			'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}

/**
 * Implements hook_preprocess_page().
 */
function entityrating_addon_preprocess_page(&$vars) {
	if (!user_access('administer entityrating addone')) {
		return;
	}
	if (arg(0) == 'node' && is_numeric(arg(1))) {
		switch (arg(2)) {
			case 'edit':
				$view_mode = 'nodeform';
				break;
			case 'delete':
				return; // delete pages show you all information in title, we should not remove it
			default:
				$view_mode = 'full';
				break;
		}
		if (_exclude_node_title(arg(1), $view_mode)) {
			$vars['title'] = '';
		}
	}
}

/**
 * Implementation of hook_entity_update;
 */
function entityrating_addon_entity_update($entity, $type) {
	//Implement this hook and not hook_node_update because of the pathautho module.
	//This is implemeneted in case we want to queue for rating the clean url aliases if they exist.
	//In order to do that we have to make sure that the process of adding the node to the queue happens
	//after the pathautho module had the chance to generate the alias. Since pathautho
	//module implements the hook_node_update, we implement the hook_entity_update because
	//this hook is called after the hook_node_update in the node_save() function.
	if($type == 'node' && variable_get('entityrating_addone_content_type_value_' . $entity->type) == 'yes') {
		entityrating_addon_add_to_queue($entity->nid);
	}
}

/**
 * Implementation of hook_entity_insert();
 */
function entityrating_addon_entity_insert($entity, $type) {
	//See explanation from article_rating_entity_update(). Same reason here.
	entityrating_addon_entity_update($entity, $type);
}

/**
 * Implementation of hook_cron();
 */
function entityrating_addon_cron() {
	module_load_include('inc', 'entityrating_addon', 'entityrating_addon.cron');
	_entityrating_addon_entity_ext_rating_updates();
	_entityrating_addon_cron();
}
/**
 * Implementation of hook_entity_ext_rating_updates
 */
function entityrating_addon_entity_ext_rating_updates($rows){
	module_load_include('inc', 'entityrating_addon', 'entityrating_addon.cron');
	_entityrating_addon_entity_ext_rating_updates($rows);
}

/**
 * Implementaion of hook_node_view
 * @param unknown_type $node
 * @param unknown_type $view_mode
 * @param unknown_type $langcode
 */
function entityrating_addon_node_view($node, $view_mode, $langcode) {
	$node_types = _node_types_build()->names;
		if(variable_get('entityrating_addone_content_type_value_' . $node->type) == 'yes') {
			$node->content['rating']['#markup'] = entityrating_addon_html_widgets($node);
			$node->content['rating']['#weight'] = -10;
		}
}

/**
 * Returns the html for the article rating widgets.
 */
function entityrating_addon_html_widgets($node, $reset = FALSE){
	global $base_url;
	$widgets = &drupal_static(__FUNCTION__, array());

	if ($reset) {
		$widgets = array();
	}

	if (isset($widgets[$node->nid])) {
		return $widgets[$node->nid];
	}

	//Do not use the url() function for the same reason as in article_rating_add_to_queue().
	$url = $base_url.'/node/'.$node->nid;
	// If there is no title, try to load the node again (Sometimes, from the DS
	// fields, the title is not included in the entity...)
	if (!$node->title) {
		$node = node_load($node->nid);
	}
	$widgets[$node->nid] = theme('entityrating_addon_html_widgets',
			array('widgets' => entity_ext_rating_get_html_widgets(array('url' => $url, 'title' => $node->title)),
					'node' => $node));
	return $widgets[$node->nid];
}

/**
 * Adds the node (article) id to the rating queue for the current week.
 */
function entityrating_addon_add_to_queue($node_id){
	//When computing the url, do not rely on the url() function because it adds
	//language and url aliases. We need to have a unique url for all situations
	//of a node.
	global $base_url;
	$url = $base_url.'/node/'.$node_id;
	$node = node_load($node_id);
	entity_ext_rating_add_to_queue($node->type.'_'. $node_id, $node_id, 'node', array('url' => $url));
}

/**
 * A form with a dropdown whose options are dependent on a
 * choice made in a previous dropdown.
 *
 * On changing the first dropdown, the options in the second
 * are updated.
 */
function filter_contenttype_and_nodes($form, &$form_state) {
	// Get the list of options to populate the first dropdown.
	$options_first = _entityrating_addon_get_first_dropdown_options();

	$selected = isset($form_state['values']['dropdown_first']) ? $form_state['values']['dropdown_first'] : key($options_first);
	$form['Intro'] = array(
			'#type' => 'markup',
			'#prefix' => '<div id="box">',
			'#suffix' => '</div>',
			'#markup' => '<h4>Here you will find the Statistics of each node in charts. Here you will get charts based on number of shares on facebook, twitter and based on view statistics of node.</br> To view analysis of each node select content type and select the respected node.</h4>',
	);
	$form['dropdown_first'] = array(
			'#type' => 'select',
			'#title' => 'Content Types',
			'#options' => $options_first,
			'#default_value' => $selected,
			'#ajax' => array(
					'callback' => 'entityrating_addon_dependent_dropdown_callback',
					'wrapper' => 'dropdown-second-replace',
			),
	);

	$form['dropdown_second'] = array(
			'#type' => 'select',
			'#title' => $options_first[$selected] . ' ' . t('Nodes'),
			'#prefix' => '<div id="dropdown-second-replace">',
			'#suffix' => '</div>',
			'#options' => _entityrating_addon_get_second_dropdown_options($selected),
			'#default_value' => isset($form_state['values']['dropdown_second']) ? $form_state['values']['dropdown_second'] : '',
	);
	
	$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Submit'),
	);
	return $form;
}

/**
 * Implementation of hook_form_submit().
 * @param array $form
 * @param array $form_state
 */
function filter_contenttype_and_nodes_submit($form, &$form_state) {
	switch ($form_state['triggering_element']['#value']) {
		case t('Submit'):
			//drupal_set_message(t('Your values have been submitted. dropdown_first=@first, dropdown_second=@second', array('@first' => $form_state['values']['dropdown_first'], '@second' => $form_state['values']['dropdown_second'])));
			$nodes = node_load_multiple(array(), array('title' => $form_state['values']['dropdown_second']));
			foreach ($nodes as $nodes => $n) {
					$fbquery = db_select('entity_ext_rating_values', 'e');
		    	$fbquery->fields('e',array('rating'));
		    	$fbquery->condition('e.entity_id', $n->nid, '=');
		    	$fbquery->condition('e.source ', 'Facebook', '=');
		    	$fbresult = $fbquery->execute();
		    	$fbresult = $fbresult->fetchAssoc();
		    	
		    	$twtrquery = db_select('entity_ext_rating_values', 'e');
		    	$twtrquery->fields('e',array('rating'));
		    	$twtrquery->condition('e.entity_id', $n->nid, '=');
		    	$twtrquery->condition('e.source ', 'Twitter', '=');
		    	$twtrresult = $twtrquery->execute();
		    	$twtrresult = $twtrresult->fetchAssoc();
		    	
		    	$node_stat = statistics_get($n->nid);

					$chart = array(
							'#chart_id' => 'abc',
							'#title' => $n->title,
							'#type' => CHART_TYPE_PIE_3D,
							'#size' => array('#width' => 1240, '#height' => 780)
					);
					$chart['#data']['facebook'] = $fbresult['rating'];
					$chart['#data']['twitter']  = $twtrresult['rating'];
					$chart['#data']['node_statistics']  = $node_stat['totalcount'];
						
					$chart['#labels'][] = t('Facebook');
					$chart['#labels'][] = t('Twitter');
					$chart['#labels'][] = t('Node Statistics');
					drupal_set_message(theme('chart', array('chart' => $chart)));
			}	
	}
	$form_state['rebuild'] = TRUE;
}
/**
 * Helper function to populate the first dropdown. This would normally be
 * pulling data from the database.
 *
 * @return array of options
 */
function _entityrating_addon_get_first_dropdown_options() {
	$node_types = _node_types_build()->names;
	foreach ($node_types as $node_type => $node_type_label) {
			$nodetypearray[] = $node_type_label;
	}
	return drupal_map_assoc($nodetypearray);
}

/**
 * Selects just the second dropdown to be returned for re-rendering
 *
 * Since the controlling logic for populating the form is in the form builder
 * function, all we do here is select the element and return it to be updated.
 *
 * @return renderable array (the second dropdown)
 */
function entityrating_addon_dependent_dropdown_callback($form, $form_state) {
	return $form['dropdown_second'];
}

/**
 * Helper function to populate the second dropdown. This would normally be
 * pulling data from the database.
 *
 * @param $key
 *   This will determine which set of options is returned.
 *
 * @return array of options
 */
function _entityrating_addon_get_second_dropdown_options($key = '') {
	$node_types = _node_types_build()->names;
	foreach($node_types as $node_type => $node_type_label) {
		$options[$node_type_label] = drupal_map_assoc(get_nodes_of_type($node_type));
	}
	if (isset($options[$key])) {
		return $options[$key];
	}
	else {
		return array();
	}
}

/**
 * This function will return the array of content types
 * @param string $node_type
 */
function get_nodes_of_type($node_type) {
	$nodearray = array() ;
  $query = db_select('node', 'n');
	$query->fields('n',array('nid', 'title'));
	$query->condition('n.type', $node_type, '=');
	$result = $query->execute();
	while($record = $result->fetchAssoc()) {
		$nodearray[] = $record['title'];
	}
  return $nodearray;
}
/**
 * This function will display rating statistics in various charts.
 */
function get_entity_charts() {
	$chart = array(
			'#chart_id' => 'test_chart',
			'#title' => t('Servings'),
			'#type' => CHART_TYPE_PIE_3D,
	);
	$chart['#data']['fruits'] = 3;
	$chart['#data']['meats']  = 2;
	$chart['#data']['dairy']  = 5;
	
	$chart['#labels'][] = t('Fruits');
	$chart['#labels'][] = t('Meats');
	$chart['#labels'][] = t('Dairy');
	
	$output = theme('chart', array('chart' => $chart));
	
	$chart = array(
			'#chart_id' => 'abc',
			'#title' => t('test'),
			'#type' => CHART_TYPE_PIE_3D,
	);
	$chart['#data']['fruits'] = 0;
	$chart['#data']['meats']  = 2;
	$chart['#data']['dairy']  = 35;
	
	$chart['#labels'][] = t('Fruits');
	$chart['#labels'][] = t('Meats');
	$chart['#labels'][] = t('Dairy');
	
	$output .= theme('chart', array('chart' => $chart));
	
	$node_types = _node_types_build()->names;
	if(variable_get('entityrating_addone_content_type_value_' . $node->type) == 'yes') {
		$allowedtype[] = $node->type;
	}
	return $output;
}